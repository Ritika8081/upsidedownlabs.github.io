"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3477],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87010:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const o={},a=void 0,s={unversionedId:"BioAmp-Software/Eye-BioAmp-Arduino-Firmware/EOGFilter/EOGFilter",id:"BioAmp-Software/Eye-BioAmp-Arduino-Firmware/EOGFilter/EOGFilter",title:"EOGFilter",description:"EOG Filter - BioAmp EXG Pill",source:"@site/docs/BioAmp-Software/Eye-BioAmp-Arduino-Firmware/2_EOGFilter/2_EOGFilter.md",sourceDirName:"BioAmp-Software/Eye-BioAmp-Arduino-Firmware/2_EOGFilter",slug:"/BioAmp-Software/Eye-BioAmp-Arduino-Firmware/EOGFilter/",permalink:"/docs/next/BioAmp-Software/Eye-BioAmp-Arduino-Firmware/EOGFilter/",draft:!1,editUrl:"https://github.com/upsidedownlabs/upsidedownlabs.github.io/docs/BioAmp-Software/Eye-BioAmp-Arduino-Firmware/2_EOGFilter/2_EOGFilter.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FixedSampling",permalink:"/docs/next/BioAmp-Software/Eye-BioAmp-Arduino-Firmware/FixedSampling/"},next:{title:"DrowsinessDetection",permalink:"/docs/next/BioAmp-Software/Eye-BioAmp-Arduino-Firmware/DrowsinessDetection/"}},l={},p=[],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"EOG Filter - BioAmp EXG Pill\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/upsidedownlabs/BioAmp-EXG-Pill"},"https://github.com/upsidedownlabs/BioAmp-EXG-Pill")),(0,i.kt)("p",null,"Upside Down Labs invests time and resources providing this open source code,\nplease support Upside Down Labs and open-source hardware by purchasing\nproducts from Upside Down Labs!"),(0,i.kt)("p",null,"Copyright (c) 2021 Upside Down Labs - ",(0,i.kt)("a",{parentName:"p",href:"mailto:contact@upsidedownlabs.tech"},"contact@upsidedownlabs.tech")),(0,i.kt)("p",null,'Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:'),(0,i.kt)("p",null,"The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software."),(0,i.kt)("p",null,'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"\n#define SAMPLE_RATE 75\n#define BAUD_RATE 115200\n#define INPUT_PIN A0\n\n\nvoid setup() {\n    // Serial connection begin\n    Serial.begin(BAUD_RATE);\n}\n\nvoid loop() {\n    // Calculate elapsed time\n    static unsigned long past = 0;\n    unsigned long present = micros();\n    unsigned long interval = present - past;\n    past = present;\n\n    // Run timer\n    static long timer = 0;\n    timer -= interval;\n\n    // Sample\n    if(timer < 0){\n        timer += 1000000 / SAMPLE_RATE;\n        float sensor_value = analogRead(INPUT_PIN);\n        float signal = EOGFilter(sensor_value);\n        Serial.println(signal);\n    }\n}\n\n// Band-Pass Butterworth IIR digital filter, generated using filter_gen.py.\n// Sampling rate: 500.0 Hz, frequency: [74.5, 149.5] Hz.\n// Filter is order 4, implemented as second-order sections (biquads).\n// Reference: \n// https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html\n// https://courses.ideate.cmu.edu/16-223/f2020/Arduino/FilterDemos/filter_gen.py\n\n\nfloat EOGFilter(float input)\n{\n  float output = input;\n  {\n    static float z1, z2; // filter section state\n    float x = output - 0.02977423*z1 - 0.04296318*z2;\n    output = 0.09797471*x + 0.19594942*z1 + 0.09797471*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - 0.08383952*z1 - 0.46067709*z2;\n    output = 1.00000000*x + 2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - -1.92167271*z1 - 0.92347975*z2;\n    output = 1.00000000*x + -2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - -1.96758891*z1 - 0.96933514*z2;\n    output = 1.00000000*x + -2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  return output;\n}\n\n")))}d.isMDXComponent=!0}}]);