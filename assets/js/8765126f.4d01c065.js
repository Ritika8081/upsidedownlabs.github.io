"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[321],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,m=u["".concat(c,".").concat(f)]||u[f]||p[f]||a;return t?i.createElement(m,o(o({ref:n},d),{},{components:t})):i.createElement(m,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},73792:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=t(87462),r=(t(67294),t(3905));const a={},o=void 0,s={unversionedId:"BioAmp-Software/Heart-BioAmp-Arduino-Firmware/BLEHeartRateDetection/BLEHeartRateDetection",id:"BioAmp-Software/Heart-BioAmp-Arduino-Firmware/BLEHeartRateDetection/BLEHeartRateDetection",title:"BLEHeartRateDetection",description:"HeartRateDetection",source:"@site/docs/BioAmp-Software/Heart-BioAmp-Arduino-Firmware/5_BLEHeartRateDetection/5_BLEHeartRateDetection.md",sourceDirName:"BioAmp-Software/Heart-BioAmp-Arduino-Firmware/5_BLEHeartRateDetection",slug:"/BioAmp-Software/Heart-BioAmp-Arduino-Firmware/BLEHeartRateDetection/",permalink:"/docs/next/BioAmp-Software/Heart-BioAmp-Arduino-Firmware/BLEHeartRateDetection/",draft:!1,editUrl:"https://github.com/upsidedownlabs/upsidedownlabs.github.io/docs/BioAmp-Software/Heart-BioAmp-Arduino-Firmware/5_BLEHeartRateDetection/5_BLEHeartRateDetection.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HeartBeatDetection",permalink:"/docs/next/BioAmp-Software/Heart-BioAmp-Arduino-Firmware/HeartBeatDetection/HeartBeatDetection"},next:{title:"FixedSampling",permalink:"/docs/next/BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/FixedSampling/"}},c={},l=[],d={toc:l},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"HeartRateDetection\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/upsidedownlabs/BioAmp-EXG-Pill"},"https://github.com/upsidedownlabs/BioAmp-EXG-Pill")),(0,r.kt)("p",null,"Upside Down Labs invests time and resources providing this open source code,\nplease support Upside Down Labs and open-source hardware by purchasing\nproducts from Upside Down Labs!"),(0,r.kt)("p",null,"Copyright (c) 2021 Upside Down Labs - ",(0,r.kt)("a",{parentName:"p",href:"mailto:contact@upsidedownlabs.tech"},"contact@upsidedownlabs.tech")),(0,r.kt)("p",null,'Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:'),(0,r.kt)("p",null,"The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software."),(0,r.kt)("p",null,'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'#include <BLEDevice.h>\n#include <BLEServer.h>\n#include <BLEUtils.h>\n#include <BLE2902.h>\n#include <math.h>\n#include <CircularBuffer.h>\n\n#define SAMPLE_RATE 125\n#define BAUD_RATE 115200\n#define INPUT_PIN 36\n#define OUTPUT_PIN 13\n#define DATA_LENGTH 16\n\nint avg = 0;\nint data_index = 0;\nbool peak = false;\nint reading = 0;\nfloat BPM = 0.0;\nbool IgnoreReading = false;\nbool FirstPulseDetected = false;\nunsigned long FirstPulseTime = 0;\nunsigned long SecondPulseTime = 0;\nunsigned long PulseInterval = 0;\nCircularBuffer<int,30> buffer;\n\nBLEServer* pServer = NULL;\nBLECharacteristic* pCharacteristic = NULL;\nbool deviceConnected = false;\nbool oldDeviceConnected = false;\nuint32_t value = 0;\n\n// See the following for generating UUIDs:\n// https://www.uuidgenerator.net/\n\n#define SERVICE_UUID        "180D"\n#define CHARACTERISTIC_UUID "2A37"\n\n\nclass MyServerCallbacks: public BLEServerCallbacks {\n    void onConnect(BLEServer* pServer) {\n      deviceConnected = true;\n    };\n\n    void onDisconnect(BLEServer* pServer) {\n      deviceConnected = false;\n    }\n};\n\nvoid setup() {\n  Serial.begin(115200);\n  \n  pinMode(INPUT_PIN, INPUT);\n  pinMode(OUTPUT_PIN, OUTPUT);\n  \n  // Create the BLE Device\n  BLEDevice::init("MyESP32");\n\n  // Create the BLE Server\n  pServer = BLEDevice::createServer();\n  pServer->setCallbacks(new MyServerCallbacks());\n\n  // Create the BLE Service\n  BLEService *pService = pServer->createService(SERVICE_UUID);\n\n  // Create a BLE Characteristic\n  pCharacteristic = pService->createCharacteristic(\n                      CHARACTERISTIC_UUID,\n                      BLECharacteristic::PROPERTY_READ   |\n                      BLECharacteristic::PROPERTY_WRITE  |\n                      BLECharacteristic::PROPERTY_NOTIFY |\n                      BLECharacteristic::PROPERTY_INDICATE\n                    );\n\n  // https://www.bluetooth.com/specifications/gatt/viewer?\n  // attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml\n  // Create a BLE Descriptor\n  pCharacteristic->addDescriptor(new BLE2902());\n\n  // Start the service\n  pService->start();\n\n  // Start advertising\n  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();\n  pAdvertising->addServiceUUID(SERVICE_UUID);\n  pAdvertising->setScanResponse(false);\n  pAdvertising->setMinPreferred(0x0);  // set value to 0x00 to not advertise this parameter\n  BLEDevice::startAdvertising();\n  Serial.println("Waiting a client connection to notify...");\n}\n\nvoid loop() {\n    // notify changed value\n    if (deviceConnected) {\n       \n//        delay(500); // bluetooth stack will go into congestion, if too many packets are sent.\n    static unsigned long past = 0;\n    unsigned long present = micros();\n    unsigned long interval = present - past;\n    past = present;\n\n  // Run timer\n  static long timer = 0;\n  timer -= interval;\n\n  // Sample\n  if(timer < 0){\n    timer += 1000000 / SAMPLE_RATE;\n    // Sample and Nomalize input data (-1 to 1)\n    float sensor_value = analogRead(INPUT_PIN);\n    float signal = ECGFilter(sensor_value)/512;\n    // Get peak\n    peak = Getpeak(signal);\n    // Print sensor_value and peak\n    // Blink LED on peak\n    digitalWrite(OUTPUT_PIN, peak);\n\n    if(peak && IgnoreReading == false){\n        if(FirstPulseDetected == false){\n          FirstPulseTime = millis();\n          FirstPulseDetected = true;\n        }\n        else{\n          SecondPulseTime = millis();\n          PulseInterval = SecondPulseTime - FirstPulseTime;\n          buffer.unshift(PulseInterval);\n          FirstPulseTime = SecondPulseTime;\n        }\n        IgnoreReading = true;\n      }\n      if(!peak){\n        IgnoreReading = false;\n      }  \n      if (buffer.isFull()){\n        for(int i = 0 ;i < buffer.size(); i++){\n          avg+=buffer[i];\n        }\n        BPM = (1.0/avg) * 60.0 * 1000 * buffer.size();\n        avg = 0;\n        buffer.pop();\n        if (BPM < 240){\n          Serial.print("BPM ");\n          Serial.println(BPM);\n          // pCharacteristic->setValue((uint8_t*)&value, 4);\n          String alea = (String) BPM; // Lo convierte en String.\n          pCharacteristic->setValue(alea.c_str()); // Pone el numero aleatorio\n          pCharacteristic->notify();\n          Serial.flush();\n        }\n      }  \n  }\n    }\n    // disconnecting\n    if (!deviceConnected && oldDeviceConnected) {\n        delay(500); // give the bluetooth stack the chance to get things ready\n        pServer->startAdvertising(); // restart advertising\n        Serial.println("start advertising");\n        oldDeviceConnected = deviceConnected;\n    }\n    // connecting\n    if (deviceConnected && !oldDeviceConnected) {\n        // do stuff here on connecting\n        oldDeviceConnected = deviceConnected;\n    }\n   \n}\nbool Getpeak(float new_sample) {\n  // Buffers for data, mean, and standard deviation\n  static float data_buffer[DATA_LENGTH];\n  static float mean_buffer[DATA_LENGTH];\n  static float standard_deviation_buffer[DATA_LENGTH];\n  \n  // Check for peak\n  if (new_sample - mean_buffer[data_index] > (DATA_LENGTH/2) * standard_deviation_buffer[data_index]) {\n    data_buffer[data_index] = new_sample + data_buffer[data_index];\n    peak = true;\n  } else {\n    data_buffer[data_index] = new_sample;\n    peak = false;\n  }\n\n  // Calculate mean\n  float sum = 0.0, mean, standard_deviation = 0.0;\n  for (int i = 0; i < DATA_LENGTH; ++i){\n    sum += data_buffer[(data_index + i) % DATA_LENGTH];\n  }\n  mean = sum/DATA_LENGTH;\n\n  // Calculate standard deviation\n  for (int i = 0; i < DATA_LENGTH; ++i){\n    standard_deviation += pow(data_buffer[(i) % DATA_LENGTH] - mean, 2);\n  }\n\n  // Update mean buffer\n  mean_buffer[data_index] = mean;\n\n  // Update standard deviation buffer\n  standard_deviation_buffer[data_index] =  sqrt(standard_deviation/DATA_LENGTH);\n\n  // Update data_index\n  data_index = (data_index+1)%DATA_LENGTH;\n\n  // Return peak\n  return peak;\n}\n\n// Band-Pass Butterworth IIR digital filter, generated using filter_gen.py.\n// Sampling rate: 125.0 Hz, frequency: [0.5, 44.5] Hz.\n// Filter is order 4, implemented as second-order sections (biquads).\n// Reference:\n// https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html\n// https://courses.ideate.cmu.edu/16-223/f2020/Arduino/FilterDemos/filter_gen.py\nfloat ECGFilter(float input)\n{\n  float output = input;\n  {\n    static float z1, z2; // filter section state\n    float x = output - 0.70682283*z1 - 0.15621030*z2;\n    output = 0.28064917*x + 0.56129834*z1 + 0.28064917*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - 0.95028224*z1 - 0.54073140*z2;\n    output = 1.00000000*x + 2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - -1.95360385*z1 - 0.95423412*z2;\n    output = 1.00000000*x + -2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - -1.98048558*z1 - 0.98111344*z2;\n    output = 1.00000000*x + -2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  return output;\n}\n\n')))}p.isMDXComponent=!0}}]);