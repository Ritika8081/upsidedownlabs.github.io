"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9690],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),f=o,m=c["".concat(s,".").concat(f)]||c[f]||d[f]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},91289:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const i={},a=void 0,l={unversionedId:"BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/ClawController/ClawController",id:"BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/ClawController/ClawController",title:"ClawController",description:"Claw Controller - BioAmp EXG Pill",source:"@site/docs/BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/4_ClawController/4_ClawController.md",sourceDirName:"BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/4_ClawController",slug:"/BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/ClawController/",permalink:"/docs/next/BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/ClawController/",draft:!1,editUrl:"https://github.com/upsidedownlabs/upsidedownlabs.github.io/docs/BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/4_ClawController/4_ClawController.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EMGEnvelope",permalink:"/docs/next/BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/EMGEnvelope/"},next:{title:"ServoControl",permalink:"/docs/next/BioAmp-Software/Muscle-BioAmp-Arduino-Firmware/ServoControl/"}},s={},p=[],u={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Claw Controller - BioAmp EXG Pill\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/upsidedownlabs/BioAmp-EXG-Pill"},"https://github.com/upsidedownlabs/BioAmp-EXG-Pill")),(0,o.kt)("p",null,"Upside Down Labs invests time and resources providing this open source code,\nplease support Upside Down Labs and open-source hardware by purchasing\nproducts from Upside Down Labs!"),(0,o.kt)("p",null,"Copyright (c) 2021 Upside Down Labs - ",(0,o.kt)("a",{parentName:"p",href:"mailto:contact@upsidedownlabs.tech"},"contact@upsidedownlabs.tech")),(0,o.kt)("p",null,'Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:'),(0,o.kt)("p",null,"The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software."),(0,o.kt)("p",null,'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'\n#if defined(ESP32) \n  #include <ESP32Servo.h>\n#else\n  #include <Servo.h>\n#endif\n\n#define SAMPLE_RATE 500\n#define BAUD_RATE 115200\n#define INPUT_PIN A0\n#define BUFFER_SIZE 128\n#define SERVO_PIN 9\n#define EMG_MIN 2\n#define EMG_MAX 10\n\nint circular_buffer[BUFFER_SIZE];\nint data_index, sum;\nint flag=0;\nServo servo;\n\nvoid setup() {\n  // Serial connection begin\n  Serial.begin(BAUD_RATE);\n  // Attach servo\n  servo.attach(SERVO_PIN);\n}\n\nvoid loop() {\n  //For initial setup only\n  if(flag==0){\n    Serial.println("Servo is now at 180 degree. Place the Servo arm & screw it in place.");\n    Serial.println("It is recommended to remove USB while placing servo arm.");\n\n    servo.write(180); \n    delay(10000);\n    flag=1;  \n  }\n  \n  // Calculate elapsed time\n  static unsigned long past = 0;\n  unsigned long present = micros();\n  unsigned long interval = present - past;\n  past = present;\n\n  // Run timer\n  static long timer = 0;\n  timer -= interval;\n\n  // Sample and get envelop\n  if(timer < 0) {\n    timer += 1000000 / SAMPLE_RATE;\n    int sensor_value = analogRead(INPUT_PIN);\n    int signal = EMGFilter(sensor_value);\n    int envelop = getEnvelop(abs(signal));\n    int servo_position = map(envelop, EMG_MIN, EMG_MAX, 90, 180);\n    servo.write(servo_position);\n    Serial.print(signal);\n    Serial.print(",");\n    Serial.println(servo_position);\n  }\n}\n\n// Envelop detection algorithm\nint getEnvelop(int abs_emg){\n  sum -= circular_buffer[data_index];\n  sum += abs_emg;\n  circular_buffer[data_index] = abs_emg;\n  data_index = (data_index + 1) % BUFFER_SIZE;\n  return (sum/BUFFER_SIZE) * 2;\n}\n\n// Band-Pass Butterworth IIR digital filter, generated using filter_gen.py.\n// Sampling rate: 500.0 Hz, frequency: [74.5, 149.5] Hz.\n// Filter is order 4, implemented as second-order sections (biquads).\n// Reference: \n// https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html\n// https://courses.ideate.cmu.edu/16-223/f2020/Arduino/FilterDemos/filter_gen.py\nfloat EMGFilter(float input)\n{\n  float output = input;\n  {\n    static float z1, z2; // filter section state\n    float x = output - 0.05159732*z1 - 0.36347401*z2;\n    output = 0.01856301*x + 0.03712602*z1 + 0.01856301*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - -0.53945795*z1 - 0.39764934*z2;\n    output = 1.00000000*x + -2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - 0.47319594*z1 - 0.70744137*z2;\n    output = 1.00000000*x + 2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  {\n    static float z1, z2; // filter section state\n    float x = output - -1.00211112*z1 - 0.74520226*z2;\n    output = 1.00000000*x + -2.00000000*z1 + 1.00000000*z2;\n    z2 = z1;\n    z1 = x;\n  }\n  return output;\n}\n')))}d.isMDXComponent=!0}}]);